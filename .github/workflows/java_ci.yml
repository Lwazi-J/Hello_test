name: Modular CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Step 1: On commit to GitHub (happens automatically with workflow trigger)

  # Step 2: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Build with Maven
        run: mvn -B compile --file pom.xml -Dmaven.compiler.source=11 -Dmaven.compiler.target=11

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  # Step 3: Run unit tests
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 1
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests
        run: mvn test

  # Step 4: Produce a JAR
  package:
    name: Create JAR Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate JAR
        run: mvn package -DskipTests

      - name: List generated JAR
        run: |
          echo "JAR file details:"
          find target -name "*.jar" -type f -exec ls -lh {} \;

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v1
        with:
          name: application-jar
          path: target/*.jar

  # Step 5: Run Terraform
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Download JAR artifact
        uses: actions/download-artifact@v1
        with:
          name: application-jar
          path: target/

      - name: List downloaded JAR
        run: find target -name "*.jar" -type f -exec ls -lh {} \;

      - name: Prepare JAR for Terraform
        run: |
          mkdir -p terraform/target
          cp target/*.jar terraform/target/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
        env:
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  # Step 6: Create Lambda ZIP
  lambda_package:
    name: Create Lambda Package
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Download JAR artifact
        uses: actions/download-artifact@v1
        with:
          name: application-jar
          path: target/

      - name: Create Lambda ZIP
        run: |
          mkdir -p lambda/
          cp target/*.jar lambda/
          cd lambda
          zip -r lambda-package.zip *
          ls -la lambda-package.zip

      - name: Upload Lambda package artifact
        uses: actions/upload-artifact@v1
        with:
          name: lambda-package
          path: lambda/lambda-package.zip

  # Step 7: Deploy to Sandbox
  deploy_sandbox:
    name: Deploy to Sandbox
    runs-on: ubuntu-latest
    needs: [terraform, lambda_package]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Download Lambda package
        uses: actions/download-artifact@v1
        with:
          name: lambda-package
          path: lambda/

      - name: Deploy to AWS Lambda Sandbox
        run: |
          # Check if function exists
          if aws lambda get-function --function-name spring-lambda-app-sandbox --region us-east-1 2>&1 | grep -q "ResourceNotFoundException"; then
            echo "Lambda function does not exist. Creating new function..."
            aws lambda create-function \
              --function-name spring-lambda-app-sandbox \
              --runtime java17 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/spring-lambda-app-lambda-role \
              --handler com.example.demo.Handler::handleRequest \
              --zip-file fileb://lambda/lambda-package.zip \
              --memory-size 512 \
              --timeout 30
          else
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name spring-lambda-app-sandbox \
              --zip-file fileb://lambda/lambda-package.zip
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  # Step 8: Run CI/CD Test
  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy_sandbox
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for Lambda deployment
        run: sleep 30

      - name: Run integration tests
        run: mvn verify -P integration-test

  # Step 9: Create Test Report
  test_report:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: [test, integration_test]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Restore Maven cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate Test Reports
        run: |
          mvn surefire-report:report-only
          mvn site -DgenerateReports=false

      - name: Create report directory
        run: mkdir -p test-reports

      - name: Prepare test report
        run: |
          # Create directory for reports
          mkdir -p test-reports
          
          # Create a detailed summary for email
          echo "TEST REPORT SUMMARY - $(date)" > test-reports/email-report.txt
          echo "Repository: ${{ github.repository }}" >> test-reports/email-report.txt
          echo "Branch: ${{ github.ref_name }}" >> test-reports/email-report.txt
          echo "Commit: ${{ github.sha }}" >> test-reports/email-report.txt
          echo "Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> test-reports/email-report.txt
          echo "" >> test-reports/email-report.txt
          echo "TEST RESULTS:" >> test-reports/email-report.txt
          
          # Extract test results summary from surefire-reports
          if [ -d "target/surefire-reports" ]; then
            echo "Unit Test Results:" >> test-reports/email-report.txt
            grep -r "Tests run:" target/surefire-reports/*.txt | sed 's/.*Tests run: \(.*\), Failures: \(.*\), Errors: \(.*\), Skipped: \(.*\)/\  - Tests: \1, Failures: \2, Errors: \3, Skipped: \4/' >> test-reports/email-report.txt
            echo "" >> test-reports/email-report.txt
          
            # List any failed tests
            grep -r "<<< FAILURE!" target/surefire-reports/*.txt | sed 's/.*\(.*Test.*\)<<< FAILURE!.*/\  - Failed: \1/' >> test-reports/email-report.txt || echo "No test failures detected" >> test-reports/email-report.txt
          else
            echo "No test reports found in target/surefire-reports" >> test-reports/email-report.txt
          fi
          
          # List the created file to verify
          ls -la test-reports/

      - name: Upload test report artifact
        uses: actions/upload-artifact@v1
        with:
          name: test-reports
          path: test-reports/

  # Step 10: Email Test Report
  email_report:
    name: Email Test Report
    runs-on: ubuntu-latest
    needs: test_report
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Download test report
        uses: actions/download-artifact@v1
        with:
          name: test-reports
          path: test-reports/

      - name: Send Email with Test Report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Test Report for ${{ github.repository }} - Build #${{ github.run_number }}
          body: |
            Hello,
            
            The pipeline for ${{ github.repository }} has completed.
            Build #${{ github.run_number }} on branch ${{ github.ref_name }}
            
            Please find attached the test report summary.
            
            Full details are available at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Regards,
            CI/CD Pipeline
          to: lwazijiyane962@gmail.com
          from: CI Pipeline
          attachments: test-reports/email-report.txt
        continue-on-error: true