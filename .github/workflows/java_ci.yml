name: Modular CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Combined pipeline in a single job to avoid artifact dependencies
  deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 1: Build
      - name: Build with Maven
        run: mvn -B compile --file pom.xml

      # Step 2: Test
      - name: Run unit tests
        run: mvn test

      # Step 3: Package
      - name: Generate JAR
        run: mvn package -DskipTests

      - name: List generated JAR
        run: |
          echo "JAR file details:"
          find target -name "*.jar" -type f -exec ls -lh {} \;

      # Step 4: Prepare for Terraform
      - name: Prepare JAR for Terraform
        run: |
          mkdir -p terraform/target
          cp target/*.jar terraform/target/

      # Step 5: Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
        env:
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Extract API Gateway URL
        id: extract-url
        run: |
          cd terraform
          API_URL=$(terraform output -raw api_gateway_url || echo "")
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "API Gateway URL: $API_URL"

      # Step 6: Wait for deployment
      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready at: $API_URL"
          
          # Basic wait with retry
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Waiting for API to be ready... (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
          
            # Try to call the API
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")
          
            if [[ "$STATUS_CODE" == "200" ]] || [[ "$STATUS_CODE" == "403" ]] || [[ "$STATUS_CODE" == "404" ]]; then
              echo "API is responding with status code: $STATUS_CODE"
              break
            else
              echo "API not ready, got status code: $STATUS_CODE"
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "WARNING: Maximum retries reached. Proceeding anyway but API might not be ready."
          fi

      # Step 7: Integration Tests
      - name: Run integration tests
        run: mvn verify -P integration-test

      # Step 8: Generate Test Reports
      - name: Generate Test Reports
        run: |
          mvn surefire-report:report-only
          mvn site -DgenerateReports=false

      - name: Prepare test report
        run: |
          # Create directory for reports
          mkdir -p test-reports
          
          # Create a detailed summary for email
          echo "TEST REPORT SUMMARY - $(date)" > test-reports/email-report.txt
          echo "Repository: ${{ github.repository }}" >> test-reports/email-report.txt
          echo "Branch: ${{ github.ref }}" >> test-reports/email-report.txt
          echo "Commit: ${{ github.sha }}" >> test-reports/email-report.txt
          echo "Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> test-reports/email-report.txt
          echo "" >> test-reports/email-report.txt
          
          # Extract test results summary from surefire-reports
          if [ -d "target/surefire-reports" ]; then
            echo "Unit Test Results:" >> test-reports/email-report.txt
            grep -r "Tests run:" target/surefire-reports/*.txt | sed 's/.*Tests run: \(.*\), Failures: \(.*\), Errors: \(.*\), Skipped: \(.*\)/\  - Tests: \1, Failures: \2, Errors: \3, Skipped: \4/' >> test-reports/email-report.txt || echo "No test results found" >> test-reports/email-report.txt
            echo "" >> test-reports/email-report.txt
          
            # List any failed tests
            grep -r "<<< FAILURE!" target/surefire-reports/*.txt | sed 's/.*\(.*Test.*\)<<< FAILURE!.*/\  - Failed: \1/' >> test-reports/email-report.txt || echo "No test failures detected" >> test-reports/email-report.txt
          else
            echo "No test reports found in target/surefire-reports" >> test-reports/email-report.txt
          fi
          
          # Print the report to the console
          cat test-reports/email-report.txt

      # Step 9: Email
      - name: Send Email with Test Report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Test Report for ${{ github.repository }} - Build #${{ github.run_number }}
          body: |
            Hello,
            
            The pipeline for ${{ github.repository }} has completed.
            Build #${{ github.run_number }} on branch ${{ github.ref }}
            
            Please find attached the test report summary.
            
            Full details are available at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Regards,
            CI/CD Pipeline
          to: lwazijiyane962@gmail.com
          from: CI Pipeline
          attachments: test-reports/email-report.txt
        continue-on-error: true