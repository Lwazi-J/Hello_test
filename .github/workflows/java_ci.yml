name: AWS Lambda CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B compile --file pom.xml

      - name: Run unit tests
        run: mvn test

      - name: Generate JAR
        run: mvn package -DskipTests

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 1

  deploy:
    name: Deploy to AWS
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: target/

      - name: Get JAR filename
        id: get-jar
        run: |
          JAR_PATH=$(find target -name "*.jar" -type f | head -1)
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "Found JAR: $JAR_PATH"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ vars.AWS_REGION || 'us-east-1' }}"
          app_name = "${{ vars.APP_NAME || 'spr-lambda-pipe' }}"
          jar_file = "${{ env.JAR_PATH }}"
          lambda_handler = "${{ vars.LAMBDA_HANDLER || 'com.example.demo.Handler::handleRequest' }}"
          lambda_runtime = "${{ vars.LAMBDA_RUNTIME || 'java17' }}"
          lambda_memory = ${{ vars.LAMBDA_MEMORY || 512 }}
          lambda_timeout = ${{ vars.LAMBDA_TIMEOUT || 30 }}
          EOF

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars -input=false

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -var-file=terraform.tfvars -auto-approve -input=false

      - name: Output API Endpoint
        if: github.event_name == 'push'
        run: |
          echo "API Endpoint: $(terraform output -raw api_endpoint)"
          echo "API_ENDPOINT=$(terraform output -raw api_endpoint)" >> $GITHUB_ENV

  test-deployment:
    name: Test Deployment
    needs: deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Get API Endpoint from previous job
        run: |
          API_ENDPOINT="${{ needs.deploy.outputs.API_ENDPOINT }}"
          if [ -z "$API_ENDPOINT" ]; then
            echo "Warning: API Endpoint not available. Skipping integration tests."
            exit 0
          fi

      - name: Test API Endpoint
        run: |
          if [ -n "$API_ENDPOINT" ]; then
            curl -s "$API_ENDPOINT" || echo "API not responding yet, may need more time to initialize"
            echo "For complete integration tests, run: mvn verify -P integration-test"
          fi

  notify:
    name: Send Notification
    needs: [deploy, test-deployment]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Prepare deployment report
        run: |
          mkdir -p reports
          cat > reports/deployment-report.txt << EOF
          DEPLOYMENT REPORT
          ----------------
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          The Lambda function has been deployed to AWS.
          Check the AWS Console for further details.
          EOF

      - name: Send Email Notification
        if: ${{ secrets.EMAIL_USERNAME != '' && secrets.EMAIL_PASSWORD != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Deployment Report for ${{ github.repository }} - Build #${{ github.run_number }}
          body: |
            Hello,
            
            The deployment pipeline for ${{ github.repository }} has completed.
            Build #${{ github.run_number }} on branch ${{ github.ref_name }}
            
            Please check the AWS Console to verify the Lambda function deployment.
            
            Full details are available at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Regards,
            CI/CD Pipeline
          to: ${{ vars.NOTIFICATION_EMAIL || 'team@example.com' }}
          from: CI Pipeline
          attachments: reports/deployment-report.txt
        continue-on-error: true