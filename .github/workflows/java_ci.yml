name: Complete DevOps Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: On commit to GitHub (happens automatically when workflow is triggered)

      # Step 2: Build
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build with Maven
        run: mvn -B compile --file pom.xml -Dmaven.compiler.source=11 -Dmaven.compiler.target=11

      # Step 3: Run unit tests
      - name: Run unit tests
        run: mvn test

      # Step 4: Produce a JAR
      - name: Generate JAR
        run: mvn package -DskipTests

      - name: List generated JAR
        run: |
          echo "JAR file details:"
          find target -name "*.jar" -type f -exec ls -lh {} \;

      # Step 5: Run Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Copy JAR file to the location expected by Terraform
      - name: Prepare JAR for Terraform
        run: |
          mkdir -p terraform/target
          cp target/hello-api-test-0.0.1-SNAPSHOT.jar terraform/target/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
        env:
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 6: Create Lambda ZIP
      - name: Create Lambda ZIP
        run: |
          mkdir -p lambda/
          cp target/*.jar lambda/
          cd lambda
          zip -r lambda-package.zip *
          ls -la lambda-package.zip

      # Step 7: Deploy to Sandbox
      - name: Deploy to AWS Lambda Sandbox
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Check if function exists
          if aws lambda get-function --function-name spring-lambda-app-sandbox --region us-east-1 2>&1 | grep -q "ResourceNotFoundException"; then
            echo "Lambda function does not exist. Creating new function..."
            aws lambda create-function \
              --function-name spring-lambda-app-sandbox \
              --runtime java17 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/spring-lambda-app-lambda-role \
              --handler com.example.Handler::handleRequest \
              --zip-file fileb://lambda/lambda-package.zip \
              --memory-size 512 \
              --timeout 30
          else
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name spring-lambda-app-sandbox \
              --zip-file fileb://lambda/lambda-package.zip
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      # Step 8: Run CI/CD Test
      - name: Run Integration Tests
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Wait for Lambda deployment to complete
          sleep 30
          # Run integration tests against the sandbox environment
          mvn verify -P integration-test

      # Step 9: Create Test Report
      - name: Generate Test Reports
        if: always()
        run: |
          mvn surefire-report:report-only
          mvn site -DgenerateReports=false

      - name: Archive Test Reports
        if: always()
        run: |
          mkdir -p test-reports
          cp -R target/site/* test-reports/
          echo "Test reports generated at $(date)" > test-reports/report-info.txt

      # Step 10: Email Test Report
      - name: Send Email with Test Report
        if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Test Report for ${{ github.repository }}
          body: Please find attached the test reports for the latest build.
          to: lwazijiyane962@gmail.com
          from: CI Pipeline
          attachments: test-reports/report-info.txt