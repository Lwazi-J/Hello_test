name: Spring Boot AWS Lambda CI/CD Pipeline (JAR Deployment)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Step 1: Commit to GitHub
  # This is handled by the developer pushing code to the repository
  # The pipeline is triggered by this action

  # Step 2: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean compile

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  # Step 3: Run Unit Tests
  unit_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Unit Tests
        run: mvn -B test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/
          retention-days: 5

  # Step 4: Produce a JAR
  package_jar:
    needs: unit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Package AWS Lambda compatible JAR
        run: mvn -B package -DskipTests -Paws

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: target/*-aws.jar
          retention-days: 5

  # Step 5: Run Terraform
  terraform:
    needs: package_jar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app
          path: target/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="app_name=spr-lambda-pipe-${{ github.ref == 'refs/heads/main' && 'prod' || 'sandbox' }}" \
            -var="jar_file=target/hello-api-test-0.0.1-SNAPSHOT-aws.jar" \
            -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Extract Terraform Outputs
        run: |
          echo "API_ENDPOINT=$(terraform output -raw api_endpoint)" >> $GITHUB_ENV
          echo "FUNCTION_NAME=$(terraform output -raw function_name)" >> $GITHUB_ENV
          echo "S3_BUCKET=$(terraform output -raw s3_bucket)" >> $GITHUB_ENV

      - name: Save Terraform Outputs
        run: |
          mkdir -p terraform-outputs
          echo "{\"api_endpoint\":\"$API_ENDPOINT\",\"function_name\":\"$FUNCTION_NAME\",\"s3_bucket\":\"$S3_BUCKET\"}" > terraform-outputs/outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: terraform-outputs/outputs.json
          retention-days: 5

  # Step 6: Upload JAR to S3
  upload_jar_to_s3:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app
          path: lambda/

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get S3 bucket name
        run: |
          S3_BUCKET=$(cat outputs.json | jq -r '.s3_bucket')
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

      - name: Upload JAR directly to S3
        run: |
          cd lambda
          JAR_FILE=$(ls *.jar)
          aws s3 cp $JAR_FILE s3://$S3_BUCKET/lambda-${{ github.sha }}.jar

      - name: Record JAR location
        run: |
          mkdir -p jar-info
          echo "{\"s3_bucket\":\"$S3_BUCKET\",\"s3_key\":\"lambda-${{ github.sha }}.jar\"}" > jar-info/location.json

      - name: Upload JAR info
        uses: actions/upload-artifact@v3
        with:
          name: jar-info
          path: jar-info/location.json
          retention-days: 5

  # Step 7: Deploy to Sandbox
  deploy_to_sandbox:
    needs: upload_jar_to_s3
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: sandbox
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Lambda function name
        run: |
          FUNCTION_NAME=$(cat outputs.json | jq -r '.function_name')
          echo "FUNCTION_NAME=$FUNCTION_NAME" >> $GITHUB_ENV
          API_ENDPOINT=$(cat outputs.json | jq -r '.api_endpoint')
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV

      - name: Verify deployment
        run: |
          aws lambda get-function \
            --function-name $FUNCTION_NAME \
            --query 'Configuration.LastUpdateStatus' \
            --output text

      - name: Save deployment info
        run: |
          mkdir -p deployment-info
          echo "{\"environment\":\"sandbox\",\"api_endpoint\":\"$API_ENDPOINT\",\"function_name\":\"$FUNCTION_NAME\"}" > deployment-info/sandbox.json

      - name: Upload deployment info
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: deployment-info/sandbox.json
          retention-days: 5

  # Step 8: Run CI/CD Test
  ci_cd_test:
    needs: deploy_to_sandbox
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: sandbox
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download deployment info
        uses: actions/download-artifact@v3
        with:
          name: deployment-info
          path: ./

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get API endpoint
        run: |
          API_ENDPOINT=$(cat sandbox.json | jq -r '.api_endpoint')
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV

      - name: Run integration tests
        run: |
          # Create basic test script
          mkdir -p integration-tests/reports
          echo "#!/bin/bash" > run-tests.sh
          echo "echo 'Testing API endpoint: $API_ENDPOINT'" >> run-tests.sh
          echo "curl -v $API_ENDPOINT/health > integration-tests/reports/health-test.log" >> run-tests.sh
          echo "curl -v $API_ENDPOINT/api/hello > integration-tests/reports/hello-test.log" >> run-tests.sh
          echo "echo 'Tests completed'" >> run-tests.sh
          chmod +x run-tests.sh
          ./run-tests.sh

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: integration-tests/reports/
          retention-days: 5

  # Step 9: Create Test Report
  create_test_report:
    needs: [unit_tests, ci_cd_test]
    if: always() && github.ref != 'refs/heads/main' && needs.unit_tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download unit test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./reports/unit-tests

      - name: Download integration test results
        if: needs.ci_cd_test.result == 'success'
        uses: actions/download-artifact@v3
        with:
          name: integration-test-results
          path: ./reports/integration-tests

      - name: Generate consolidated test report
        run: |
          mkdir -p ./reports/consolidated
          echo "<html><head><title>Test Report</title></head><body>" > ./reports/consolidated/test-report.html
          echo "<h1>Unit Test Results</h1>" >> ./reports/consolidated/test-report.html
          echo "<pre>" >> ./reports/consolidated/test-report.html
          find ./reports/unit-tests -type f -name "*.xml" -exec cat {} \; >> ./reports/consolidated/test-report.html
          echo "</pre>" >> ./reports/consolidated/test-report.html
          if [ -d "./reports/integration-tests" ]; then
            echo "<h1>Integration Test Results</h1>" >> ./reports/consolidated/test-report.html
            echo "<pre>" >> ./reports/consolidated/test-report.html
            find ./reports/integration-tests -type f -name "*.log" -exec cat {} \; >> ./reports/consolidated/test-report.html
            echo "</pre>" >> ./reports/consolidated/test-report.html
          fi
          echo "</body></html>" >> ./reports/consolidated/test-report.html

      - name: Upload consolidated test report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-test-report
          path: ./reports/consolidated/
          retention-days: 10

  # Step 10: Email Test Report
  email_test_report:
    needs: create_test_report
    if: always() && needs.create_test_report.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download consolidated test report
        uses: actions/download-artifact@v3
        with:
          name: consolidated-test-report
          path: ./reports

      - name: Send email with test report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Spring Boot Lambda Application - Test Report
          body: Please find attached the latest test report for the Spring Boot Lambda application.
          to: team@example.com
          from: CI/CD Pipeline <cicd@example.com>
          attachments: ./reports/test-report.html